// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_umsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_umsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_umsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_umsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_umsg_2eproto;
namespace umsg {
class LogEvent;
class LogEventDefaultTypeInternal;
extern LogEventDefaultTypeInternal _LogEvent_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointXYZIRL;
class PointXYZIRLDefaultTypeInternal;
extern PointXYZIRLDefaultTypeInternal _PointXYZIRL_default_instance_;
class sample;
class sampleDefaultTypeInternal;
extern sampleDefaultTypeInternal _sample_default_instance_;
}  // namespace umsg
PROTOBUF_NAMESPACE_OPEN
template<> ::umsg::LogEvent* Arena::CreateMaybeMessage<::umsg::LogEvent>(Arena*);
template<> ::umsg::PointCloud* Arena::CreateMaybeMessage<::umsg::PointCloud>(Arena*);
template<> ::umsg::PointXYZIRL* Arena::CreateMaybeMessage<::umsg::PointXYZIRL>(Arena*);
template<> ::umsg::sample* Arena::CreateMaybeMessage<::umsg::sample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace umsg {

// ===================================================================

class sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:umsg.sample) */ {
 public:
  inline sample() : sample(nullptr) {};
  virtual ~sample();

  sample(const sample& from);
  sample(sample&& from) noexcept
    : sample() {
    *this = ::std::move(from);
  }

  inline sample& operator=(const sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline sample& operator=(sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sample* internal_default_instance() {
    return reinterpret_cast<const sample*>(
               &_sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(sample& a, sample& b) {
    a.Swap(&b);
  }
  inline void Swap(sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sample* New() const final {
    return CreateMaybeMessage<sample>(nullptr);
  }

  sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sample& from);
  void MergeFrom(const sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "umsg.sample";
  }
  protected:
  explicit sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_umsg_2eproto);
    return ::descriptor_table_umsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kClientsFieldNumber = 1,
    kReaderCntFieldNumber = 2,
  };
  // string _msg = 3;
  void clear__msg();
  const std::string& _msg() const;
  void set__msg(const std::string& value);
  void set__msg(std::string&& value);
  void set__msg(const char* value);
  void set__msg(const char* value, size_t size);
  std::string* mutable__msg();
  std::string* release__msg();
  void set_allocated__msg(std::string* _msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__msg(
      std::string* _msg);
  private:
  const std::string& _internal__msg() const;
  void _internal_set__msg(const std::string& value);
  std::string* _internal_mutable__msg();
  public:

  // uint32 _clients = 1;
  void clear__clients();
  ::PROTOBUF_NAMESPACE_ID::uint32 _clients() const;
  void set__clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal__clients() const;
  void _internal_set__clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 _reader_cnt = 2;
  void clear__reader_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 _reader_cnt() const;
  void set__reader_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal__reader_cnt() const;
  void _internal_set__reader_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:umsg.sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _clients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _reader_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_umsg_2eproto;
};
// -------------------------------------------------------------------

class PointXYZIRL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:umsg.PointXYZIRL) */ {
 public:
  inline PointXYZIRL() : PointXYZIRL(nullptr) {};
  virtual ~PointXYZIRL();

  PointXYZIRL(const PointXYZIRL& from);
  PointXYZIRL(PointXYZIRL&& from) noexcept
    : PointXYZIRL() {
    *this = ::std::move(from);
  }

  inline PointXYZIRL& operator=(const PointXYZIRL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointXYZIRL& operator=(PointXYZIRL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointXYZIRL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointXYZIRL* internal_default_instance() {
    return reinterpret_cast<const PointXYZIRL*>(
               &_PointXYZIRL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointXYZIRL& a, PointXYZIRL& b) {
    a.Swap(&b);
  }
  inline void Swap(PointXYZIRL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointXYZIRL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointXYZIRL* New() const final {
    return CreateMaybeMessage<PointXYZIRL>(nullptr);
  }

  PointXYZIRL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointXYZIRL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointXYZIRL& from);
  void MergeFrom(const PointXYZIRL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointXYZIRL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "umsg.PointXYZIRL";
  }
  protected:
  explicit PointXYZIRL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_umsg_2eproto);
    return ::descriptor_table_umsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIntensityFieldNumber = 4,
    kRingFieldNumber = 5,
    kLabelFieldNumber = 6,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float intensity = 4;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // uint32 ring = 5;
  void clear_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring() const;
  void set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring() const;
  void _internal_set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 6;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:umsg.PointXYZIRL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float intensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_umsg_2eproto;
};
// -------------------------------------------------------------------

class PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:umsg.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {};
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "umsg.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_umsg_2eproto);
    return ::descriptor_table_umsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .umsg.PointXYZIRL points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::umsg::PointXYZIRL* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::umsg::PointXYZIRL >*
      mutable_points();
  private:
  const ::umsg::PointXYZIRL& _internal_points(int index) const;
  ::umsg::PointXYZIRL* _internal_add_points();
  public:
  const ::umsg::PointXYZIRL& points(int index) const;
  ::umsg::PointXYZIRL* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::umsg::PointXYZIRL >&
      points() const;

  // @@protoc_insertion_point(class_scope:umsg.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::umsg::PointXYZIRL > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_umsg_2eproto;
};
// -------------------------------------------------------------------

class LogEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:umsg.LogEvent) */ {
 public:
  inline LogEvent() : LogEvent(nullptr) {};
  virtual ~LogEvent();

  LogEvent(const LogEvent& from);
  LogEvent(LogEvent&& from) noexcept
    : LogEvent() {
    *this = ::std::move(from);
  }

  inline LogEvent& operator=(const LogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEvent& operator=(LogEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEvent* internal_default_instance() {
    return reinterpret_cast<const LogEvent*>(
               &_LogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogEvent& a, LogEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEvent* New() const final {
    return CreateMaybeMessage<LogEvent>(nullptr);
  }

  LogEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEvent& from);
  void MergeFrom(const LogEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "umsg.LogEvent";
  }
  protected:
  explicit LogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_umsg_2eproto);
    return ::descriptor_table_umsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsolFieldNumber = 2,
    kLogEventFieldNumber = 1,
  };
  // string obsol = 2;
  void clear_obsol();
  const std::string& obsol() const;
  void set_obsol(const std::string& value);
  void set_obsol(std::string&& value);
  void set_obsol(const char* value);
  void set_obsol(const char* value, size_t size);
  std::string* mutable_obsol();
  std::string* release_obsol();
  void set_allocated_obsol(std::string* obsol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsol(
      std::string* obsol);
  private:
  const std::string& _internal_obsol() const;
  void _internal_set_obsol(const std::string& value);
  std::string* _internal_mutable_obsol();
  public:

  // bool log_event = 1;
  void clear_log_event();
  bool log_event() const;
  void set_log_event(bool value);
  private:
  bool _internal_log_event() const;
  void _internal_set_log_event(bool value);
  public:

  // @@protoc_insertion_point(class_scope:umsg.LogEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsol_;
  bool log_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_umsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sample

// uint32 _clients = 1;
inline void sample::clear__clients() {
  _clients_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sample::_internal__clients() const {
  return _clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sample::_clients() const {
  // @@protoc_insertion_point(field_get:umsg.sample._clients)
  return _internal__clients();
}
inline void sample::_internal_set__clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  _clients_ = value;
}
inline void sample::set__clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set__clients(value);
  // @@protoc_insertion_point(field_set:umsg.sample._clients)
}

// uint32 _reader_cnt = 2;
inline void sample::clear__reader_cnt() {
  _reader_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sample::_internal__reader_cnt() const {
  return _reader_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sample::_reader_cnt() const {
  // @@protoc_insertion_point(field_get:umsg.sample._reader_cnt)
  return _internal__reader_cnt();
}
inline void sample::_internal_set__reader_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  _reader_cnt_ = value;
}
inline void sample::set__reader_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set__reader_cnt(value);
  // @@protoc_insertion_point(field_set:umsg.sample._reader_cnt)
}

// string _msg = 3;
inline void sample::clear__msg() {
  _msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& sample::_msg() const {
  // @@protoc_insertion_point(field_get:umsg.sample._msg)
  return _internal__msg();
}
inline void sample::set__msg(const std::string& value) {
  _internal_set__msg(value);
  // @@protoc_insertion_point(field_set:umsg.sample._msg)
}
inline std::string* sample::mutable__msg() {
  // @@protoc_insertion_point(field_mutable:umsg.sample._msg)
  return _internal_mutable__msg();
}
inline const std::string& sample::_internal__msg() const {
  return _msg_.Get();
}
inline void sample::_internal_set__msg(const std::string& value) {
  
  _msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void sample::set__msg(std::string&& value) {
  
  _msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:umsg.sample._msg)
}
inline void sample::set__msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  _msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:umsg.sample._msg)
}
inline void sample::set__msg(const char* value,
    size_t size) {
  
  _msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:umsg.sample._msg)
}
inline std::string* sample::_internal_mutable__msg() {
  
  return _msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* sample::release__msg() {
  // @@protoc_insertion_point(field_release:umsg.sample._msg)
  return _msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sample::set_allocated__msg(std::string* _msg) {
  if (_msg != nullptr) {
    
  } else {
    
  }
  _msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:umsg.sample._msg)
}
inline std::string* sample::unsafe_arena_release__msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:umsg.sample._msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return _msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void sample::unsafe_arena_set_allocated__msg(
    std::string* _msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_msg != nullptr) {
    
  } else {
    
  }
  _msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:umsg.sample._msg)
}

// -------------------------------------------------------------------

// PointXYZIRL

// float x = 1;
inline void PointXYZIRL::clear_x() {
  x_ = 0;
}
inline float PointXYZIRL::_internal_x() const {
  return x_;
}
inline float PointXYZIRL::x() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.x)
  return _internal_x();
}
inline void PointXYZIRL::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PointXYZIRL::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.x)
}

// float y = 2;
inline void PointXYZIRL::clear_y() {
  y_ = 0;
}
inline float PointXYZIRL::_internal_y() const {
  return y_;
}
inline float PointXYZIRL::y() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.y)
  return _internal_y();
}
inline void PointXYZIRL::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PointXYZIRL::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.y)
}

// float z = 3;
inline void PointXYZIRL::clear_z() {
  z_ = 0;
}
inline float PointXYZIRL::_internal_z() const {
  return z_;
}
inline float PointXYZIRL::z() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.z)
  return _internal_z();
}
inline void PointXYZIRL::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PointXYZIRL::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.z)
}

// float intensity = 4;
inline void PointXYZIRL::clear_intensity() {
  intensity_ = 0;
}
inline float PointXYZIRL::_internal_intensity() const {
  return intensity_;
}
inline float PointXYZIRL::intensity() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.intensity)
  return _internal_intensity();
}
inline void PointXYZIRL::_internal_set_intensity(float value) {
  
  intensity_ = value;
}
inline void PointXYZIRL::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.intensity)
}

// uint32 ring = 5;
inline void PointXYZIRL::clear_ring() {
  ring_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIRL::_internal_ring() const {
  return ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIRL::ring() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.ring)
  return _internal_ring();
}
inline void PointXYZIRL::_internal_set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ring_ = value;
}
inline void PointXYZIRL::set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ring(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.ring)
}

// uint32 label = 6;
inline void PointXYZIRL::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIRL::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIRL::label() const {
  // @@protoc_insertion_point(field_get:umsg.PointXYZIRL.label)
  return _internal_label();
}
inline void PointXYZIRL::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void PointXYZIRL::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:umsg.PointXYZIRL.label)
}

// -------------------------------------------------------------------

// PointCloud

// repeated .umsg.PointXYZIRL points = 1;
inline int PointCloud::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline ::umsg::PointXYZIRL* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:umsg.PointCloud.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::umsg::PointXYZIRL >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:umsg.PointCloud.points)
  return &points_;
}
inline const ::umsg::PointXYZIRL& PointCloud::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::umsg::PointXYZIRL& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:umsg.PointCloud.points)
  return _internal_points(index);
}
inline ::umsg::PointXYZIRL* PointCloud::_internal_add_points() {
  return points_.Add();
}
inline ::umsg::PointXYZIRL* PointCloud::add_points() {
  // @@protoc_insertion_point(field_add:umsg.PointCloud.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::umsg::PointXYZIRL >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:umsg.PointCloud.points)
  return points_;
}

// -------------------------------------------------------------------

// LogEvent

// bool log_event = 1;
inline void LogEvent::clear_log_event() {
  log_event_ = false;
}
inline bool LogEvent::_internal_log_event() const {
  return log_event_;
}
inline bool LogEvent::log_event() const {
  // @@protoc_insertion_point(field_get:umsg.LogEvent.log_event)
  return _internal_log_event();
}
inline void LogEvent::_internal_set_log_event(bool value) {
  
  log_event_ = value;
}
inline void LogEvent::set_log_event(bool value) {
  _internal_set_log_event(value);
  // @@protoc_insertion_point(field_set:umsg.LogEvent.log_event)
}

// string obsol = 2;
inline void LogEvent::clear_obsol() {
  obsol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogEvent::obsol() const {
  // @@protoc_insertion_point(field_get:umsg.LogEvent.obsol)
  return _internal_obsol();
}
inline void LogEvent::set_obsol(const std::string& value) {
  _internal_set_obsol(value);
  // @@protoc_insertion_point(field_set:umsg.LogEvent.obsol)
}
inline std::string* LogEvent::mutable_obsol() {
  // @@protoc_insertion_point(field_mutable:umsg.LogEvent.obsol)
  return _internal_mutable_obsol();
}
inline const std::string& LogEvent::_internal_obsol() const {
  return obsol_.Get();
}
inline void LogEvent::_internal_set_obsol(const std::string& value) {
  
  obsol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogEvent::set_obsol(std::string&& value) {
  
  obsol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:umsg.LogEvent.obsol)
}
inline void LogEvent::set_obsol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obsol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:umsg.LogEvent.obsol)
}
inline void LogEvent::set_obsol(const char* value,
    size_t size) {
  
  obsol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:umsg.LogEvent.obsol)
}
inline std::string* LogEvent::_internal_mutable_obsol() {
  
  return obsol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogEvent::release_obsol() {
  // @@protoc_insertion_point(field_release:umsg.LogEvent.obsol)
  return obsol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEvent::set_allocated_obsol(std::string* obsol) {
  if (obsol != nullptr) {
    
  } else {
    
  }
  obsol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:umsg.LogEvent.obsol)
}
inline std::string* LogEvent::unsafe_arena_release_obsol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:umsg.LogEvent.obsol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return obsol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogEvent::unsafe_arena_set_allocated_obsol(
    std::string* obsol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsol != nullptr) {
    
  } else {
    
  }
  obsol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:umsg.LogEvent.obsol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace umsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_umsg_2eproto
